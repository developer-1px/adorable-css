import{S as CS,i as mS,s as bS,k as o,q as r,a as S,l as i,m as f,r as p,h as e,c as v,M as ce,n as V,b as E,C as t,B as Zi,w as uS,x as wS,y as OS,f as LS,t as xS,z as PS}from"../../../chunks/index-5e2bc00b.js";function TS(hi){let C,T,A,m,D,ni,gi,ae,lf,ro,po,so,el,ef,Eo,tl,tf,So,ol,Ce,Op,vo,il,me,Lp,_o,X,of,be,ff,co,W,ue,rf,pf,ao,fl,sf,Co,rl,Ef,mo,Y,we,Sf,vf,bo,pl,Z,_f,Oe,df,cf,uo,sl,af,wo,q,Cf,Le,mf,bf,Oo,H,uf,xe,wf,Of,Lo,El,Lf,xo,Sl,vl,Pe,xf,Pf,Po,To,Io,_l,Tf,Do,dl,If,yo,G,Te,Df,yf,u,cl,Ie,Af,kf,qf,al,De,Hf,Gf,Mf,ye,Bf,Jf,Ae,Rf,Uf,ke,Qf,Nf,qe,zf,Ao,Cl,Kf,ko,M,$f,He,jf,Ff,qo,ml,Vf,Ho,bl,Xf,Go,b,Ge,Wf,Yf,Me,Zf,hf,Be,nf,gf,Je,l1,e1,Re,t1,o1,Ue,i1,Mo,ul,f1,Bo,wl,r1,Jo,Ol,p1,Ro,Ll,s1,Uo,xl,Qe,E1,Qo,Pl,S1,No,B,J,Ne,v1,_1,ze,d1,c1,a1,h,C1,Ke,m1,b1,zo,Tl,u1,Ko,Il,$e,w1,$o,Dl,O1,jo,R,U,je,L1,x1,Fe,P1,T1,I1,yl,D1,Ve,y1,Fo,Al,A1,Vo,Q,k1,Xe,q1,H1,Xo,kl,We,G1,Wo,ql,M1,Yo,Hl,B1,Zo,Gl,Ye,J1,ho,O,R1,Ze,U1,Q1,he,N1,z1,ne,K1,$1,no,Ml,j1,go,Bl,n,F1,ge,V1,X1,li,Jl,lt,W1,ei,c,et,Y1,Z1,tt,h1,n1,ot,g1,l2,it,e2,t2,ft,o2,i2,rt,f2,r2,pt,p2,s2,st,E2,S2,Et,v2,_2,St,d2,c2,vt,a2,C2,_t,m2,ti,g,dt,ct,b2,oi,_,u2,at,w2,O2,Ct,L2,x2,mt,P2,T2,bt,I2,D2,ut,y2,A2,wt,k2,q2,Ot,H2,G2,Lt,M2,B2,xt,J2,R2,Pt,U2,Q2,Tt,N2,z2,It,K2,$2,Dt,j2,F2,yt,V2,X2,At,W2,Y2,kt,Z2,h2,qt,n2,g2,Ht,lr,ii,Rl,er,fi,Ul,tr,ri,Ql,Gt,or,pi,Nl,ir,si,zl,Mt,fr,Ei,Kl,rr,Si,$l,Bt,xp,vi,jl,pr,_i,Fl,sr,di,Vl,Er,ci,Xl,L,Jt,Sr,vr,Rt,_r,dr,Ut,cr,ar,Qt,Cr,mr,ai,Wl,br,Ci,N,Nt,ur,wr,zt,Yl,Or,Kt,Pp,mi,Zl,$t,Tp,bi,hl,Lr,ui,z,xr,jt,Pr,Tr,wi,nl,Ft,Ip,Oi,gl,Ir,Li,le,Dr,xi,ee,yr,Pi,K,Vt,Ar,kr,I,Xt,qr,Hr,Wt,Gr,Mr,Yt,Br,Jr,Zt,Rr,Ti,te,Ur,Ii,$,ht,Qr,Nr,w,oe,nt,zr,Kr,$r,ie,gt,jr,Fr,Vr,fe,lo,Xr,Wr,Yr,ll,eo,Zr,hr,to,nr,gr,re,oo,lp,ep,Di,pe,tp,yi,se,op,Ai,Ee,ip,ki,Se,fp,qi,ve,rp,Hi,_e,pp,Gi,de,sp;return{c(){C=o("h1"),T=r("어쩌다 AdorableCSS를 만들게 되었나요?"),A=S(),m=o("ol"),D=o("li"),ni=r("TailwindCSS를 현업에서 사용하지 못했던 이유"),gi=S(),ae=o("li"),lf=r("그래서 이렇게 만들었습니다."),ro=S(),po=o("hr"),so=S(),el=o("h3"),ef=r("TailwindCSS를 현업에서 사용하지 못했던 이유"),Eo=S(),tl=o("p"),tf=r(`TailwindCSS를 현업에서 쓰기위해 적용을 해보니 당시에는 몇가지 문제들이 있었습니다.
TailwindCSS는 아래와 같이 크기와 색상을 미리 만들어서 제공을 하였습니다.`),So=S(),ol=o("p"),Ce=o("img"),vo=S(),il=o("p"),me=o("img"),_o=S(),X=o("p"),of=r("하지만 저는 대부분 실전에서 디자이너가 만들어 달라는대로 작업을 해야했기에 "),be=o("strong"),ff=r("미리 지정된 크기와 색상으로만 작업 할 수는 없었습니다."),co=S(),W=o("p"),ue=o("strong"),rf=r("TailwindCSS는 미리 정해둔 색상과 정해진 규격에 맞춰서 개발을 하는 것이 좋은 것"),pf=r(` 이라고 설명을 하고 있었지만
실전에서는 디자인의 수정과 개발의 작업을 불편하게 만들어 줄 뿐이었습니다.`),ao=S(),fl=o("p"),sf=r(`TailwindCSS가 주장하는 바가 곧 디자인 시스템이고 이는 틀린말은 아니었으나, 실제로 디자인 시스템이 갖춰지기까지에는 상당한 시간이 걸리고,
그 시간동안은 디자인 시스템이 갖춰지지 않은 상태에서 개발을 해야하는데 TailwindCSS는 이러한 상황에서는 적합하지 않았습니다.`),Co=S(),rl=o("p"),Ef=r("뿐만 아니라 w-12는 12px이 아니라 48px로 당시 머터리얼 디자인에서 사용하던 4px grid 기반의 체계는 내가 원하는 크기를 만들기 위해서 계속 계산을 해서 개발 과정을 멈칫거리게 만들었습니다."),mo=S(),Y=o("p"),we=o("strong"),Sf=r("내가 원하는 수치와 색상을 그대로 사용할 수 있으면 좋겠다"),vf=r("라는 생각이 들었고 이것이 AdorableCSS를 만들어야겠다는 생각이 들게 만들었습니다."),bo=S(),pl=o("blockquote"),Z=o("p"),_f=r("Tailwind도 현재는 3.0 이후로 "),Oe=o("strong"),df=r("JIT(Just-In-Time)이라는 방식"),cf=r("이 나오면서 이러한 부분을 해결을 하고 있습니다만, 여전히 w-12는 12px이 아니며 복잡해지는 문법으로 인해 러닝커브가 발생하고 있습니다."),uo=S(),sl=o("p"),af=r(`대부분의 inline class이름은 직관적이었으나, 몇몇 이름들은 - 특히 flexbox는 - CSS 스펙과 이름이 미묘하게 달라서 매번 문서를 찾아 봐야했어요.
CSS를 많이했던 저의 개발 경험과는 조금 어긋남을 느꼈습니다.`),wo=S(),q=o("p"),Cf=r("무엇보다 "),Le=o("strong"),mf=r("tailwindCSS는 내가 알고 있는 CSS의 모든 기능을 다 제공하는 것은 아니었어요."),bf=r(` 조건부 class 서식이나, Child Selector를 쓸 수도 없었습니다.
코드 가독성이 떨어지는 부분들은 inline이라서가 아니라 이렇게 조건부 class들이라는 것들도 알게 되었습니다.`),Oo=S(),H=o("p"),uf=r("결국 TailwindCSS가 "),xe=o("strong"),wf=r("기존 CSS 개발경험을 완전히 대체를 할 수 없다보니"),Of=r(` 디자인이 없는 프로토타입에는 유리하나
디자이너와 주로 협업을 하는 현업환경에서 쓰기에는 상당히 부담이 되었습니다.`),Lo=S(),El=o("p"),Lf=r("그렇다고 TailwindCSS가 완전히 싫은 것은 아니었습니다. 어떤 부분에는 꽤 괜찮은 점들도 있었고, Atomic CSS 패러다임 자체는 괜찮은 것 같았습니다."),xo=S(),Sl=o("blockquote"),vl=o("p"),Pe=o("strong"),xf=r("‘TailwindCSS가 컨셉과 패러다임은 참 좋은 것 같은데 나한테는 맞지 않는 옷인듯 하다. 이 참에 나한테 맞는 AtomicCSS 프레임워크를 만들수 있지 않을까?’"),Pf=r(`
라는 생각에 “내가 현업에서 쓸 수 있는 CSS 프레임워크” 라는 컨셉으로 한번 만들어보기로 하였습니다!`),Po=S(),To=o("hr"),Io=S(),_l=o("h2"),Tf=r("AdorableCSS는 뭐가 다를까?"),Do=S(),dl=o("p"),If=r("Atomic CSS 패러다임은 사실 괜찮은건데 TailwindCSS가 아쉬운거라면 더 괜찮은 AtomicCSS 라이브러리를 만들 수 있지 않을까?"),yo=S(),G=o("blockquote"),Te=o("h4"),Df=r("TailwindCSS의 아쉬운 점 정리"),yf=S(),u=o("ol"),cl=o("li"),Ie=o("del"),Af=r("내가 원하는 색상과 수치를 직접 입력 할 수가 없다."),kf=r(" (JIT 3.0 출시)"),qf=S(),al=o("li"),De=o("del"),Hf=r("용량이 크다. purge를 하면 되지만 속도가 느리다."),Gf=r(" (JIT 3.0 출시)"),Mf=S(),ye=o("li"),Bf=r("w-16은 16px이 아니다. 4배수 계산 이슈."),Jf=S(),Ae=o("li"),Rf=r("미묘하게 아쉬운 스펙과 문법 = 러닝커브 발생 (특히 flexbox)"),Uf=S(),ke=o("li"),Qf=r("조건부 서식등으로 HTML이 복잡해진다."),Nf=S(),qe=o("li"),zf=r("CSS 기능이 부족하다."),Ao=S(),Cl=o("p"),Kf=r("최초 제일 핵심 차별화가 될거라고 기대했던 부분은 지금은 tailwind에서 JIT를 쓰면서 해결이 되었습니다. 그럼에도 tailwindCSS를 쓰다보면 뭔가 멈칫멈칫 거리게 되는 부분들이 있었습니다."),ko=S(),M=o("p"),$f=r("그 이유가 무엇일지 생각해보니 내가 CSS와 HTML와 JS를 코딩하던 습관들과 미묘하게 다른 구성들이 있었기에 최대한 "),He=o("strong"),jf=r("직관적이고 더 간결한 문법을 가질 수 있도록"),Ff=r(" 만들어보고 싶었습니다."),qo=S(),ml=o("p"),Vf=r("또한 두번 배우지 않고 내가 알고 있는 CSS 지식을 가급적 그대로 쓸 수 있도록 하기 위해서 CSS의 모든 기능을 제공하고 싶었습니다."),Ho=S(),bl=o("h3"),Xf=r("🤔 내가 원하는 CSS는 어떤 CSS일까?"),Go=S(),b=o("ul"),Ge=o("li"),Wf=r("러닝커브를 더 낮추고 싶었다."),Yf=S(),Me=o("li"),Zf=r("수치나 값이 눈에 잘 보였으면 좋겠다."),hf=S(),Be=o("li"),nf=r("타이핑은 많이 하지 않았으면 좋겠다."),gf=S(),Je=o("li"),l1=r("가독성이 더 높았으면 좋겠다."),e1=S(),Re=o("li"),t1=r("손에 익은 타이핑 방식이면 좋겠다."),o1=S(),Ue=o("li"),i1=r("px이 근본이었으면 좋겠다."),Mo=S(),ul=o("p"),f1=r(`이러한 생각들을 바탕으로 새로운 문법을 가진 CSS Framework를 만들어 보았습니다.
AdorableCSS의 문법이 탄생하게 된 배경과 생각을 따라가면서 아주 쉽게 문법을 배울 수 있게 되기를 바랍니다.`),Bo=S(),wl=o("h3"),r1=r("어떻게 해서 지금의 문법이 탄생했는가?"),Jo=S(),Ol=o("p"),p1=r("러닝커브를 최소화하기 위해서는 CSS의 문법과 최대한 유사하게 만드는 게 좋겠다고 생각을 했습니다. 그래서 처음에는 inline-style을 쓰는 것과 비슷한 형태로 만들어보고자 했습니다."),Ro=S(),Ll=o("h4"),s1=r("1"),Uo=S(),xl=o("p"),Qe=o("code"),E1=r('style="font: 18px/1.5 bold; position: absolute; top: 0; margin: 0 20px; color: red;"'),Qo=S(),Pl=o("p"),S1=r("class이름은 띄어쓰기를 분리가 되므로 하나의 속성을 나타내기 위해서 띄어쓰기를 하면 안되기 때문에"),No=S(),B=o("ul"),J=o("li"),Ne=o("code"),v1=r(";"),_1=r("를 대신 띄어쓰기로 구분을 하고, 기존 띄어쓰기는 "),ze=o("code"),d1=r("/"),c1=r("로 대체하였습니다."),a1=S(),h=o("li"),C1=r("그리고 "),Ke=o("code"),m1=r("px단위는 생략"),b1=r("을 할 수 있도록 해서 조금 더 간결하게 쓸 수 있도록 해보았습니다."),zo=S(),Tl=o("h4"),u1=r("2"),Ko=S(),Il=o("p"),$e=o("code"),w1=r('class="font:18/1.5 bold position:absolute top:0 margin:0/20 color:red"'),$o=S(),Dl=o("p"),O1=r("위와 같이 작성을 해보니 2가지가 눈에 밟혔습니다."),jo=S(),R=o("ul"),U=o("li"),je=o("code"),L1=r(":"),x1=r(" 다음에 습관적으로 스페이스를 누르는 경우가 빈번했습니다. "),Fe=o("code"),P1=r("font: 18"),T1=r(" (X)"),I1=S(),yl=o("li"),D1=r("숫자나 값이 눈에 잘 들어오지 않는다. "),Ve=o("code"),y1=r("top:0 margin:0/20"),Fo=S(),Al=o("h4"),A1=r("3"),Vo=S(),Q=o("p"),k1=r("그래서 "),Xe=o("code"),q1=r("()표기법"),H1=r("을 통해 값을 조금 더 잘보이게 하면서 띄어쓰기 습관에 문제가 되지 않던 문법을 선택하였습니다."),Xo=S(),kl=o("p"),We=o("code"),G1=r('class="font(18/1.5) bold position(absolute) top(0) margin(0/20) color(red)"'),Wo=S(),ql=o("h4"),M1=r("4"),Yo=S(),Hl=o("p"),B1=r("class명이 너무 길어지는 것 같아서 이름들을 최대한 줄여서 작성을 해보았습니다."),Zo=S(),Gl=o("p"),Ye=o("code"),J1=r('class="f(18/1.5) b abs t(0) m(0/20) c(red)"'),ho=S(),O=o("p"),R1=r("1~2글자로 줄여도 "),Ze=o("code"),U1=r("m(20) c(red)"),Q1=r("와 같이 가독성 측면에서도 더 나아지는 것이 있는가 하면, 반대로 "),he=o("code"),N1=r("f(18) t(0)"),z1=S(),ne=o("code"),K1=r("abs"),$1=r("와 같이 글자수를 줄이면 의미파악이 잘 되지 않는 것 등이 있었습니다."),no=S(),Ml=o("p"),j1=r("타이핑을 줄이면서도 CSS를 새로 배운지 않게 할 수 있도록 중간점을 찾는 고민을 많이 하면서 다음과 같은 규칙을 선정하였습니다."),go=S(),Bl=o("ol"),n=o("li"),F1=r("이미 1~2글자로 줄여서 부르고 있어서 "),ge=o("strong"),V1=r("짧게 축약해도 그 속성이 바로 떠오르는 것들은 줄여서 쓴다."),X1=r(" 그 외에는 그대로 쓴다."),li=S(),Jl=o("p"),lt=o("code"),W1=r('class="w(32) h(32) r(8) p(10/16) m(4/8/10/12) z(9999) bg(#000) c(#fff) b(#480ff)"'),ei=S(),c=o("ul"),et=o("li"),Y1=r("w = width"),Z1=S(),tt=o("li"),h1=r("h = height"),n1=S(),ot=o("li"),g1=r("r = border-radius"),l2=S(),it=o("li"),e2=r("m = margin"),t2=S(),ft=o("li"),o2=r("b = border"),i2=S(),rt=o("li"),f2=r("p = padding"),r2=S(),pt=o("li"),p2=r("z = z-index"),s2=S(),st=o("li"),E2=r("bg = background"),S2=S(),Et=o("li"),v2=r("c = color"),_2=S(),St=o("li"),d2=r("mt = margin-top"),c2=S(),vt=o("li"),a2=r("bbw = border-bottom-width"),C2=S(),_t=o("li"),m2=r("pr = padding-right"),ti=S(),g=o("ol"),dt=o("li"),ct=o("strong"),b2=r("유니크한 CSS value거나 속성을 유추할 수 있는 값이라면 값만 쓴다."),oi=S(),_=o("p"),u2=r("ex) "),at=o("code"),w2=r(".inline"),O2=S(),Ct=o("code"),L2=r(".block"),x2=S(),mt=o("code"),P2=r(".none"),T2=S(),bt=o("code"),I2=r(".visible"),D2=S(),ut=o("code"),y2=r(".hidden"),A2=S(),wt=o("code"),k2=r(".bold"),q2=S(),Ot=o("code"),H2=r(".underline"),G2=S(),Lt=o("code"),M2=r(".100"),B2=S(),xt=o("code"),J2=r(".200"),R2=S(),Pt=o("code"),U2=r(".absolute"),Q2=S(),Tt=o("code"),N2=r(".relative"),z2=S(),It=o("code"),K2=r(".sticky"),$2=S(),Dt=o("code"),j2=r(".fixed"),F2=S(),yt=o("code"),V2=r(".border-box"),X2=S(),At=o("code"),W2=r(".content-box"),Y2=S(),kt=o("code"),Z2=r(".space-between"),h2=S(),qt=o("code"),n2=r(".space-around"),g2=S(),Ht=o("code"),lr=r(".pointer"),ii=S(),Rl=o("h4"),er=r("5"),fi=S(),Ul=o("p"),tr=r(`CSS의 모든 다른 모든 기능들인 Selector와 Pseudo-class, Pseudo-element, Media Query, Keyframes, Variables 등을 모두 쓸 수 있도록 제공하고 싶었습니다.
그래서 조금 더 복잡한 CSS 구문들을 고민해보았습니다.`),ri=S(),Ql=o("p"),Gt=o("code"),or=r("div.selected:hover { background: rgba(255,170,0,.5) !important; color: var(--primary);}"),pi=S(),Nl=o("p"),ir=r("위와 같은 구문을 최대한 구조는 유지하면서도 간결하게 쓸 수 있도록 해보았습니다."),si=S(),zl=o("p"),Mt=o("code"),fr=r('<div class=".selected:hover:bg(#fa0.5)! c(--primary)">'),Ei=S(),Kl=o("p"),rr=r("이러한 전개를 통해서 현재의 AdorableCSS의 기본적인 큰 문법의 틀이 완성되었습니다."),Si=S(),$l=o("p"),Bt=o("img"),vi=S(),jl=o("p"),pr=r("최대한 내가 쓰고 있던 CSS의 큰 틀을 흔들지 않고 몇가지 추론 가능한 문법을 통해서 문법이 완전히 같지 않지만 충분히 유추가 가능하도록 만들어보았습니다."),_i=S(),Fl=o("h3"),sr=r("가장 많이 쓰는 flexbox는 편하게 쓰게 해주자!"),di=S(),Vl=o("p"),Er=r("tailwindCSS를 쓰면서 또 아쉬웠던 부분은 flexbox 및 layout 관련 문법들이었습니다. CSS에서 가장 많이 쓰이는 속성들인데 직관적이지 못한 방식들과 길어지는 타이핑으로 인해 복잡하게 보이게 만드는 주범이라고 생각을 했습니다."),ci=S(),Xl=o("blockquote"),L=o("p"),Jt=o("code"),Sr=r("items-*"),vr=S(),Rt=o("code"),_r=r("content-*"),dr=S(),Ut=o("code"),cr=r("justify-content-*"),ar=S(),Qt=o("code"),Cr=r("justify-*"),mr=r(`
align-items? align-content? justify-content? justify-items?
flexbox를 다루다보면 정말 헷가리는 속성들! 조금더 쉽게 다룰 수는 없을까?`),ai=S(),Wl=o("p"),br=r("이러한 문법은 가장 많이쓰는 디자인 핸드오프 툴인 figma에서 영감을 받아 AutoLayout과 유사한 형태로 작성할 수 있게 하여 간결함과 생산성을 높였습니다."),Ci=S(),N=o("blockquote"),Nt=o("h4"),ur=r("flexbox와 figma의 AutoLayout"),wr=S(),zt=o("ol"),Yl=o("li"),Or=r(`방향 2. gap, 3. padding, 4. 배치
`),Kt=o("img"),mi=S(),Zl=o("p"),$t=o("img"),bi=S(),hl=o("h3"),Lr=r("편리한 Positioning Layer"),ui=S(),z=o("p"),xr=r("뿐만 아니라 absolute나 fixed를 이용한 배치의 경우도 빈번이 일어나는데 "),jt=o("code"),Pr=r("top:0; left:0; right:0; bottom:0; width:100%; height:100%"),Tr=r(" 와 같은 배치구문들도 보다 직관적인 방식을 제공하여 훨씬 던 간결하면서도 생산성 있는 문법을 제공하였습니다."),wi=S(),nl=o("p"),Ft=o("img"),Oi=S(),gl=o("h3"),Ir=r("그밖에 더 많은 기능들"),Li=S(),le=o("p"),Dr=r("그밖에도 여러가지 진보된 AtomicCSS의 기조를 따르면서도 불편했었던 많은 부분들을 수정, 보완하는 방법들을 추가하였습니다."),xi=S(),ee=o("p"),yr=r("TailwindCSS를 하다보면 TailwindCSS로 할 수 없는 상황이 나오곤 했습니다. class선택자나 자식 선택자나 복잡한 셀렉터를 써야 하는 경우도 마찬가지였습니다. 기본적으로 CSS에서 제공하는 모든 기능들을 제공하려고 하였습니다."),Pi=S(),K=o("blockquote"),Vt=o("h4"),Ar=r("All-in-one package!"),kr=S(),I=o("ol"),Xt=o("li"),qr=r("모든 CSS Property 사용 가능"),Hr=S(),Wt=o("li"),Gr=r(":nth-child, ::after등 모든 pseudo 사용 가능"),Mr=S(),Yt=o("li"),Br=r("모든 Selector 사용 가능"),Jr=S(),Zt=o("li"),Rr=r("모든 Media Query 사용 가능 (예정, 현재는 width만 제공하고 있습니다.)"),Ti=S(),te=o("p"),Ur=r("뿐만 아니라 적게쓰고 짧게 축약하면서도 직관적으로 다 담을 수 있도록 만들어 보았습니다."),Ii=S(),$=o("blockquote"),ht=o("h4"),Qr=r("기타 센스 있는 문법들"),Nr=S(),w=o("ul"),oe=o("li"),nt=o("code"),zr=r("w(32~100%)"),Kr=r(" = min-width: 32px; max-width: 100%;"),$r=S(),ie=o("li"),gt=o("code"),jr=r("font(16/1.5/-1%)"),Fr=r(" = font-size, line-height, letter-spacing"),Vr=S(),fe=o("li"),lo=o("code"),Xr=r("c(--primary)"),Wr=r(" = color: var(—primary)"),Yr=S(),ll=o("li"),eo=o("code"),Zr=r("@w(~768)"),hr=r(": "),to=o("code"),nr=r("@media max-width(768) { ... }"),gr=S(),re=o("li"),oo=o("code"),lp=r("nowarp..."),ep=r(" = 말줄임…"),Di=S(),pe=o("h3"),tp=r("내가 편하면 남들도 편하다!"),yi=S(),se=o("p"),op=r("라는 생각으로 만들어진 AdorableCSS는 누구나 쉽게 쓸 수 있도록 만들어졌습니다."),Ai=S(),Ee=o("p"),ip=r("사용헤본 사람은 알겠지만 tailwindCSS는 사용하기 쉽지만 익숙해지기까지는 시간이 필요합니다."),ki=S(),Se=o("p"),fp=r("그러나 AdorableCSS는 tailwindCSS와 비슷한 문법을 제공하면서도 더 직관적이고 익숙한 문법을 제공하고 있습니다."),qi=S(),ve=o("p"),rp=r("tailwindCSS보다 할 수 있는 것이 더 많으면서도 훨씬 더 직관적이며 손이 덜 가는 문법을 제공하고 있습니다."),Hi=S(),_e=o("p"),pp=r("AdorableCSS와 함께 ‘이렇게도 CSS를 편하게 사용할 수 있구나!’ 하는 멋진 경험을 한번 해보시기 바랍니다."),Gi=S(),de=o("p"),sp=r("감사합니다."),this.h()},l(l){C=i(l,"H1",{});var s=f(C);T=p(s,"어쩌다 AdorableCSS를 만들게 되었나요?"),s.forEach(e),A=v(l),m=i(l,"OL",{});var Mi=f(m);D=i(Mi,"LI",{});var Dp=f(D);ni=p(Dp,"TailwindCSS를 현업에서 사용하지 못했던 이유"),Dp.forEach(e),gi=v(Mi),ae=i(Mi,"LI",{});var yp=f(ae);lf=p(yp,"그래서 이렇게 만들었습니다."),yp.forEach(e),Mi.forEach(e),ro=v(l),po=i(l,"HR",{}),so=v(l),el=i(l,"H3",{});var Ap=f(el);ef=p(Ap,"TailwindCSS를 현업에서 사용하지 못했던 이유"),Ap.forEach(e),Eo=v(l),tl=i(l,"P",{});var kp=f(tl);tf=p(kp,`TailwindCSS를 현업에서 쓰기위해 적용을 해보니 당시에는 몇가지 문제들이 있었습니다.
TailwindCSS는 아래와 같이 크기와 색상을 미리 만들어서 제공을 하였습니다.`),kp.forEach(e),So=v(l),ol=i(l,"P",{});var qp=f(ol);Ce=i(qp,"IMG",{src:!0}),qp.forEach(e),vo=v(l),il=i(l,"P",{});var Hp=f(il);me=i(Hp,"IMG",{src:!0}),Hp.forEach(e),_o=v(l),X=i(l,"P",{});var Ep=f(X);of=p(Ep,"하지만 저는 대부분 실전에서 디자이너가 만들어 달라는대로 작업을 해야했기에 "),be=i(Ep,"STRONG",{});var Gp=f(be);ff=p(Gp,"미리 지정된 크기와 색상으로만 작업 할 수는 없었습니다."),Gp.forEach(e),Ep.forEach(e),co=v(l),W=i(l,"P",{});var Sp=f(W);ue=i(Sp,"STRONG",{});var Mp=f(ue);rf=p(Mp,"TailwindCSS는 미리 정해둔 색상과 정해진 규격에 맞춰서 개발을 하는 것이 좋은 것"),Mp.forEach(e),pf=p(Sp,` 이라고 설명을 하고 있었지만
실전에서는 디자인의 수정과 개발의 작업을 불편하게 만들어 줄 뿐이었습니다.`),Sp.forEach(e),ao=v(l),fl=i(l,"P",{});var Bp=f(fl);sf=p(Bp,`TailwindCSS가 주장하는 바가 곧 디자인 시스템이고 이는 틀린말은 아니었으나, 실제로 디자인 시스템이 갖춰지기까지에는 상당한 시간이 걸리고,
그 시간동안은 디자인 시스템이 갖춰지지 않은 상태에서 개발을 해야하는데 TailwindCSS는 이러한 상황에서는 적합하지 않았습니다.`),Bp.forEach(e),Co=v(l),rl=i(l,"P",{});var Jp=f(rl);Ef=p(Jp,"뿐만 아니라 w-12는 12px이 아니라 48px로 당시 머터리얼 디자인에서 사용하던 4px grid 기반의 체계는 내가 원하는 크기를 만들기 위해서 계속 계산을 해서 개발 과정을 멈칫거리게 만들었습니다."),Jp.forEach(e),mo=v(l),Y=i(l,"P",{});var vp=f(Y);we=i(vp,"STRONG",{});var Rp=f(we);Sf=p(Rp,"내가 원하는 수치와 색상을 그대로 사용할 수 있으면 좋겠다"),Rp.forEach(e),vf=p(vp,"라는 생각이 들었고 이것이 AdorableCSS를 만들어야겠다는 생각이 들게 만들었습니다."),vp.forEach(e),bo=v(l),pl=i(l,"BLOCKQUOTE",{});var Up=f(pl);Z=i(Up,"P",{});var Bi=f(Z);_f=p(Bi,"Tailwind도 현재는 3.0 이후로 "),Oe=i(Bi,"STRONG",{});var Qp=f(Oe);df=p(Qp,"JIT(Just-In-Time)이라는 방식"),Qp.forEach(e),cf=p(Bi,"이 나오면서 이러한 부분을 해결을 하고 있습니다만, 여전히 w-12는 12px이 아니며 복잡해지는 문법으로 인해 러닝커브가 발생하고 있습니다."),Bi.forEach(e),Up.forEach(e),uo=v(l),sl=i(l,"P",{});var Np=f(sl);af=p(Np,`대부분의 inline class이름은 직관적이었으나, 몇몇 이름들은 - 특히 flexbox는 - CSS 스펙과 이름이 미묘하게 달라서 매번 문서를 찾아 봐야했어요.
CSS를 많이했던 저의 개발 경험과는 조금 어긋남을 느꼈습니다.`),Np.forEach(e),wo=v(l),q=i(l,"P",{});var Ji=f(q);Cf=p(Ji,"무엇보다 "),Le=i(Ji,"STRONG",{});var zp=f(Le);mf=p(zp,"tailwindCSS는 내가 알고 있는 CSS의 모든 기능을 다 제공하는 것은 아니었어요."),zp.forEach(e),bf=p(Ji,` 조건부 class 서식이나, Child Selector를 쓸 수도 없었습니다.
코드 가독성이 떨어지는 부분들은 inline이라서가 아니라 이렇게 조건부 class들이라는 것들도 알게 되었습니다.`),Ji.forEach(e),Oo=v(l),H=i(l,"P",{});var Ri=f(H);uf=p(Ri,"결국 TailwindCSS가 "),xe=i(Ri,"STRONG",{});var Kp=f(xe);wf=p(Kp,"기존 CSS 개발경험을 완전히 대체를 할 수 없다보니"),Kp.forEach(e),Of=p(Ri,` 디자인이 없는 프로토타입에는 유리하나
디자이너와 주로 협업을 하는 현업환경에서 쓰기에는 상당히 부담이 되었습니다.`),Ri.forEach(e),Lo=v(l),El=i(l,"P",{});var $p=f(El);Lf=p($p,"그렇다고 TailwindCSS가 완전히 싫은 것은 아니었습니다. 어떤 부분에는 꽤 괜찮은 점들도 있었고, Atomic CSS 패러다임 자체는 괜찮은 것 같았습니다."),$p.forEach(e),xo=v(l),Sl=i(l,"BLOCKQUOTE",{});var jp=f(Sl);vl=i(jp,"P",{});var _p=f(vl);Pe=i(_p,"STRONG",{});var Fp=f(Pe);xf=p(Fp,"‘TailwindCSS가 컨셉과 패러다임은 참 좋은 것 같은데 나한테는 맞지 않는 옷인듯 하다. 이 참에 나한테 맞는 AtomicCSS 프레임워크를 만들수 있지 않을까?’"),Fp.forEach(e),Pf=p(_p,`
라는 생각에 “내가 현업에서 쓸 수 있는 CSS 프레임워크” 라는 컨셉으로 한번 만들어보기로 하였습니다!`),_p.forEach(e),jp.forEach(e),Po=v(l),To=i(l,"HR",{}),Io=v(l),_l=i(l,"H2",{});var Vp=f(_l);Tf=p(Vp,"AdorableCSS는 뭐가 다를까?"),Vp.forEach(e),Do=v(l),dl=i(l,"P",{});var Xp=f(dl);If=p(Xp,"Atomic CSS 패러다임은 사실 괜찮은건데 TailwindCSS가 아쉬운거라면 더 괜찮은 AtomicCSS 라이브러리를 만들 수 있지 않을까?"),Xp.forEach(e),yo=v(l),G=i(l,"BLOCKQUOTE",{});var Ui=f(G);Te=i(Ui,"H4",{});var Wp=f(Te);Df=p(Wp,"TailwindCSS의 아쉬운 점 정리"),Wp.forEach(e),yf=v(Ui),u=i(Ui,"OL",{});var x=f(u);cl=i(x,"LI",{});var dp=f(cl);Ie=i(dp,"DEL",{});var Yp=f(Ie);Af=p(Yp,"내가 원하는 색상과 수치를 직접 입력 할 수가 없다."),Yp.forEach(e),kf=p(dp," (JIT 3.0 출시)"),dp.forEach(e),qf=v(x),al=i(x,"LI",{});var cp=f(al);De=i(cp,"DEL",{});var Zp=f(De);Hf=p(Zp,"용량이 크다. purge를 하면 되지만 속도가 느리다."),Zp.forEach(e),Gf=p(cp," (JIT 3.0 출시)"),cp.forEach(e),Mf=v(x),ye=i(x,"LI",{});var hp=f(ye);Bf=p(hp,"w-16은 16px이 아니다. 4배수 계산 이슈."),hp.forEach(e),Jf=v(x),Ae=i(x,"LI",{});var np=f(Ae);Rf=p(np,"미묘하게 아쉬운 스펙과 문법 = 러닝커브 발생 (특히 flexbox)"),np.forEach(e),Uf=v(x),ke=i(x,"LI",{});var gp=f(ke);Qf=p(gp,"조건부 서식등으로 HTML이 복잡해진다."),gp.forEach(e),Nf=v(x),qe=i(x,"LI",{});var ls=f(qe);zf=p(ls,"CSS 기능이 부족하다."),ls.forEach(e),x.forEach(e),Ui.forEach(e),Ao=v(l),Cl=i(l,"P",{});var es=f(Cl);Kf=p(es,"최초 제일 핵심 차별화가 될거라고 기대했던 부분은 지금은 tailwind에서 JIT를 쓰면서 해결이 되었습니다. 그럼에도 tailwindCSS를 쓰다보면 뭔가 멈칫멈칫 거리게 되는 부분들이 있었습니다."),es.forEach(e),ko=v(l),M=i(l,"P",{});var Qi=f(M);$f=p(Qi,"그 이유가 무엇일지 생각해보니 내가 CSS와 HTML와 JS를 코딩하던 습관들과 미묘하게 다른 구성들이 있었기에 최대한 "),He=i(Qi,"STRONG",{});var ts=f(He);jf=p(ts,"직관적이고 더 간결한 문법을 가질 수 있도록"),ts.forEach(e),Ff=p(Qi," 만들어보고 싶었습니다."),Qi.forEach(e),qo=v(l),ml=i(l,"P",{});var os=f(ml);Vf=p(os,"또한 두번 배우지 않고 내가 알고 있는 CSS 지식을 가급적 그대로 쓸 수 있도록 하기 위해서 CSS의 모든 기능을 제공하고 싶었습니다."),os.forEach(e),Ho=v(l),bl=i(l,"H3",{});var is=f(bl);Xf=p(is,"🤔 내가 원하는 CSS는 어떤 CSS일까?"),is.forEach(e),Go=v(l),b=i(l,"UL",{});var P=f(b);Ge=i(P,"LI",{});var fs=f(Ge);Wf=p(fs,"러닝커브를 더 낮추고 싶었다."),fs.forEach(e),Yf=v(P),Me=i(P,"LI",{});var rs=f(Me);Zf=p(rs,"수치나 값이 눈에 잘 보였으면 좋겠다."),rs.forEach(e),hf=v(P),Be=i(P,"LI",{});var ps=f(Be);nf=p(ps,"타이핑은 많이 하지 않았으면 좋겠다."),ps.forEach(e),gf=v(P),Je=i(P,"LI",{});var ss=f(Je);l1=p(ss,"가독성이 더 높았으면 좋겠다."),ss.forEach(e),e1=v(P),Re=i(P,"LI",{});var Es=f(Re);t1=p(Es,"손에 익은 타이핑 방식이면 좋겠다."),Es.forEach(e),o1=v(P),Ue=i(P,"LI",{});var Ss=f(Ue);i1=p(Ss,"px이 근본이었으면 좋겠다."),Ss.forEach(e),P.forEach(e),Mo=v(l),ul=i(l,"P",{});var vs=f(ul);f1=p(vs,`이러한 생각들을 바탕으로 새로운 문법을 가진 CSS Framework를 만들어 보았습니다.
AdorableCSS의 문법이 탄생하게 된 배경과 생각을 따라가면서 아주 쉽게 문법을 배울 수 있게 되기를 바랍니다.`),vs.forEach(e),Bo=v(l),wl=i(l,"H3",{});var _s=f(wl);r1=p(_s,"어떻게 해서 지금의 문법이 탄생했는가?"),_s.forEach(e),Jo=v(l),Ol=i(l,"P",{});var ds=f(Ol);p1=p(ds,"러닝커브를 최소화하기 위해서는 CSS의 문법과 최대한 유사하게 만드는 게 좋겠다고 생각을 했습니다. 그래서 처음에는 inline-style을 쓰는 것과 비슷한 형태로 만들어보고자 했습니다."),ds.forEach(e),Ro=v(l),Ll=i(l,"H4",{});var cs=f(Ll);s1=p(cs,"1"),cs.forEach(e),Uo=v(l),xl=i(l,"P",{});var as=f(xl);Qe=i(as,"CODE",{});var Cs=f(Qe);E1=p(Cs,'style="font: 18px/1.5 bold; position: absolute; top: 0; margin: 0 20px; color: red;"'),Cs.forEach(e),as.forEach(e),Qo=v(l),Pl=i(l,"P",{});var ms=f(Pl);S1=p(ms,"class이름은 띄어쓰기를 분리가 되므로 하나의 속성을 나타내기 위해서 띄어쓰기를 하면 안되기 때문에"),ms.forEach(e),No=v(l),B=i(l,"UL",{});var Ni=f(B);J=i(Ni,"LI",{});var io=f(J);Ne=i(io,"CODE",{});var bs=f(Ne);v1=p(bs,";"),bs.forEach(e),_1=p(io,"를 대신 띄어쓰기로 구분을 하고, 기존 띄어쓰기는 "),ze=i(io,"CODE",{});var us=f(ze);d1=p(us,"/"),us.forEach(e),c1=p(io,"로 대체하였습니다."),io.forEach(e),a1=v(Ni),h=i(Ni,"LI",{});var zi=f(h);C1=p(zi,"그리고 "),Ke=i(zi,"CODE",{});var ws=f(Ke);m1=p(ws,"px단위는 생략"),ws.forEach(e),b1=p(zi,"을 할 수 있도록 해서 조금 더 간결하게 쓸 수 있도록 해보았습니다."),zi.forEach(e),Ni.forEach(e),zo=v(l),Tl=i(l,"H4",{});var Os=f(Tl);u1=p(Os,"2"),Os.forEach(e),Ko=v(l),Il=i(l,"P",{});var Ls=f(Il);$e=i(Ls,"CODE",{});var xs=f($e);w1=p(xs,'class="font:18/1.5 bold position:absolute top:0 margin:0/20 color:red"'),xs.forEach(e),Ls.forEach(e),$o=v(l),Dl=i(l,"P",{});var Ps=f(Dl);O1=p(Ps,"위와 같이 작성을 해보니 2가지가 눈에 밟혔습니다."),Ps.forEach(e),jo=v(l),R=i(l,"UL",{});var Ki=f(R);U=i(Ki,"LI",{});var fo=f(U);je=i(fo,"CODE",{});var Ts=f(je);L1=p(Ts,":"),Ts.forEach(e),x1=p(fo," 다음에 습관적으로 스페이스를 누르는 경우가 빈번했습니다. "),Fe=i(fo,"CODE",{});var Is=f(Fe);P1=p(Is,"font: 18"),Is.forEach(e),T1=p(fo," (X)"),fo.forEach(e),I1=v(Ki),yl=i(Ki,"LI",{});var ap=f(yl);D1=p(ap,"숫자나 값이 눈에 잘 들어오지 않는다. "),Ve=i(ap,"CODE",{});var Ds=f(Ve);y1=p(Ds,"top:0 margin:0/20"),Ds.forEach(e),ap.forEach(e),Ki.forEach(e),Fo=v(l),Al=i(l,"H4",{});var ys=f(Al);A1=p(ys,"3"),ys.forEach(e),Vo=v(l),Q=i(l,"P",{});var $i=f(Q);k1=p($i,"그래서 "),Xe=i($i,"CODE",{});var As=f(Xe);q1=p(As,"()표기법"),As.forEach(e),H1=p($i,"을 통해 값을 조금 더 잘보이게 하면서 띄어쓰기 습관에 문제가 되지 않던 문법을 선택하였습니다."),$i.forEach(e),Xo=v(l),kl=i(l,"P",{});var ks=f(kl);We=i(ks,"CODE",{});var qs=f(We);G1=p(qs,'class="font(18/1.5) bold position(absolute) top(0) margin(0/20) color(red)"'),qs.forEach(e),ks.forEach(e),Wo=v(l),ql=i(l,"H4",{});var Hs=f(ql);M1=p(Hs,"4"),Hs.forEach(e),Yo=v(l),Hl=i(l,"P",{});var Gs=f(Hl);B1=p(Gs,"class명이 너무 길어지는 것 같아서 이름들을 최대한 줄여서 작성을 해보았습니다."),Gs.forEach(e),Zo=v(l),Gl=i(l,"P",{});var Ms=f(Gl);Ye=i(Ms,"CODE",{});var Bs=f(Ye);J1=p(Bs,'class="f(18/1.5) b abs t(0) m(0/20) c(red)"'),Bs.forEach(e),Ms.forEach(e),ho=v(l),O=i(l,"P",{});var j=f(O);R1=p(j,"1~2글자로 줄여도 "),Ze=i(j,"CODE",{});var Js=f(Ze);U1=p(Js,"m(20) c(red)"),Js.forEach(e),Q1=p(j,"와 같이 가독성 측면에서도 더 나아지는 것이 있는가 하면, 반대로 "),he=i(j,"CODE",{});var Rs=f(he);N1=p(Rs,"f(18) t(0)"),Rs.forEach(e),z1=v(j),ne=i(j,"CODE",{});var Us=f(ne);K1=p(Us,"abs"),Us.forEach(e),$1=p(j,"와 같이 글자수를 줄이면 의미파악이 잘 되지 않는 것 등이 있었습니다."),j.forEach(e),no=v(l),Ml=i(l,"P",{});var Qs=f(Ml);j1=p(Qs,"타이핑을 줄이면서도 CSS를 새로 배운지 않게 할 수 있도록 중간점을 찾는 고민을 많이 하면서 다음과 같은 규칙을 선정하였습니다."),Qs.forEach(e),go=v(l),Bl=i(l,"OL",{});var Ns=f(Bl);n=i(Ns,"LI",{});var ji=f(n);F1=p(ji,"이미 1~2글자로 줄여서 부르고 있어서 "),ge=i(ji,"STRONG",{});var zs=f(ge);V1=p(zs,"짧게 축약해도 그 속성이 바로 떠오르는 것들은 줄여서 쓴다."),zs.forEach(e),X1=p(ji," 그 외에는 그대로 쓴다."),ji.forEach(e),Ns.forEach(e),li=v(l),Jl=i(l,"P",{});var Ks=f(Jl);lt=i(Ks,"CODE",{});var $s=f(lt);W1=p($s,'class="w(32) h(32) r(8) p(10/16) m(4/8/10/12) z(9999) bg(#000) c(#fff) b(#480ff)"'),$s.forEach(e),Ks.forEach(e),ei=v(l),c=i(l,"UL",{});var a=f(c);et=i(a,"LI",{});var js=f(et);Y1=p(js,"w = width"),js.forEach(e),Z1=v(a),tt=i(a,"LI",{});var Fs=f(tt);h1=p(Fs,"h = height"),Fs.forEach(e),n1=v(a),ot=i(a,"LI",{});var Vs=f(ot);g1=p(Vs,"r = border-radius"),Vs.forEach(e),l2=v(a),it=i(a,"LI",{});var Xs=f(it);e2=p(Xs,"m = margin"),Xs.forEach(e),t2=v(a),ft=i(a,"LI",{});var Ws=f(ft);o2=p(Ws,"b = border"),Ws.forEach(e),i2=v(a),rt=i(a,"LI",{});var Ys=f(rt);f2=p(Ys,"p = padding"),Ys.forEach(e),r2=v(a),pt=i(a,"LI",{});var Zs=f(pt);p2=p(Zs,"z = z-index"),Zs.forEach(e),s2=v(a),st=i(a,"LI",{});var hs=f(st);E2=p(hs,"bg = background"),hs.forEach(e),S2=v(a),Et=i(a,"LI",{});var ns=f(Et);v2=p(ns,"c = color"),ns.forEach(e),_2=v(a),St=i(a,"LI",{});var gs=f(St);d2=p(gs,"mt = margin-top"),gs.forEach(e),c2=v(a),vt=i(a,"LI",{});var lE=f(vt);a2=p(lE,"bbw = border-bottom-width"),lE.forEach(e),C2=v(a),_t=i(a,"LI",{});var eE=f(_t);m2=p(eE,"pr = padding-right"),eE.forEach(e),a.forEach(e),ti=v(l),g=i(l,"OL",{start:!0});var tE=f(g);dt=i(tE,"LI",{});var oE=f(dt);ct=i(oE,"STRONG",{});var iE=f(ct);b2=p(iE,"유니크한 CSS value거나 속성을 유추할 수 있는 값이라면 값만 쓴다."),iE.forEach(e),oE.forEach(e),tE.forEach(e),oi=v(l),_=i(l,"P",{});var d=f(_);u2=p(d,"ex) "),at=i(d,"CODE",{});var fE=f(at);w2=p(fE,".inline"),fE.forEach(e),O2=v(d),Ct=i(d,"CODE",{});var rE=f(Ct);L2=p(rE,".block"),rE.forEach(e),x2=v(d),mt=i(d,"CODE",{});var pE=f(mt);P2=p(pE,".none"),pE.forEach(e),T2=v(d),bt=i(d,"CODE",{});var sE=f(bt);I2=p(sE,".visible"),sE.forEach(e),D2=v(d),ut=i(d,"CODE",{});var EE=f(ut);y2=p(EE,".hidden"),EE.forEach(e),A2=v(d),wt=i(d,"CODE",{});var SE=f(wt);k2=p(SE,".bold"),SE.forEach(e),q2=v(d),Ot=i(d,"CODE",{});var vE=f(Ot);H2=p(vE,".underline"),vE.forEach(e),G2=v(d),Lt=i(d,"CODE",{});var _E=f(Lt);M2=p(_E,".100"),_E.forEach(e),B2=v(d),xt=i(d,"CODE",{});var dE=f(xt);J2=p(dE,".200"),dE.forEach(e),R2=v(d),Pt=i(d,"CODE",{});var cE=f(Pt);U2=p(cE,".absolute"),cE.forEach(e),Q2=v(d),Tt=i(d,"CODE",{});var aE=f(Tt);N2=p(aE,".relative"),aE.forEach(e),z2=v(d),It=i(d,"CODE",{});var CE=f(It);K2=p(CE,".sticky"),CE.forEach(e),$2=v(d),Dt=i(d,"CODE",{});var mE=f(Dt);j2=p(mE,".fixed"),mE.forEach(e),F2=v(d),yt=i(d,"CODE",{});var bE=f(yt);V2=p(bE,".border-box"),bE.forEach(e),X2=v(d),At=i(d,"CODE",{});var uE=f(At);W2=p(uE,".content-box"),uE.forEach(e),Y2=v(d),kt=i(d,"CODE",{});var wE=f(kt);Z2=p(wE,".space-between"),wE.forEach(e),h2=v(d),qt=i(d,"CODE",{});var OE=f(qt);n2=p(OE,".space-around"),OE.forEach(e),g2=v(d),Ht=i(d,"CODE",{});var LE=f(Ht);lr=p(LE,".pointer"),LE.forEach(e),d.forEach(e),ii=v(l),Rl=i(l,"H4",{});var xE=f(Rl);er=p(xE,"5"),xE.forEach(e),fi=v(l),Ul=i(l,"P",{});var PE=f(Ul);tr=p(PE,`CSS의 모든 다른 모든 기능들인 Selector와 Pseudo-class, Pseudo-element, Media Query, Keyframes, Variables 등을 모두 쓸 수 있도록 제공하고 싶었습니다.
그래서 조금 더 복잡한 CSS 구문들을 고민해보았습니다.`),PE.forEach(e),ri=v(l),Ql=i(l,"P",{});var TE=f(Ql);Gt=i(TE,"CODE",{});var IE=f(Gt);or=p(IE,"div.selected:hover { background: rgba(255,170,0,.5) !important; color: var(--primary);}"),IE.forEach(e),TE.forEach(e),pi=v(l),Nl=i(l,"P",{});var DE=f(Nl);ir=p(DE,"위와 같은 구문을 최대한 구조는 유지하면서도 간결하게 쓸 수 있도록 해보았습니다."),DE.forEach(e),si=v(l),zl=i(l,"P",{});var yE=f(zl);Mt=i(yE,"CODE",{});var AE=f(Mt);fr=p(AE,'<div class=".selected:hover:bg(#fa0.5)! c(--primary)">'),AE.forEach(e),yE.forEach(e),Ei=v(l),Kl=i(l,"P",{});var kE=f(Kl);rr=p(kE,"이러한 전개를 통해서 현재의 AdorableCSS의 기본적인 큰 문법의 틀이 완성되었습니다."),kE.forEach(e),Si=v(l),$l=i(l,"P",{});var qE=f($l);Bt=i(qE,"IMG",{src:!0}),qE.forEach(e),vi=v(l),jl=i(l,"P",{});var HE=f(jl);pr=p(HE,"최대한 내가 쓰고 있던 CSS의 큰 틀을 흔들지 않고 몇가지 추론 가능한 문법을 통해서 문법이 완전히 같지 않지만 충분히 유추가 가능하도록 만들어보았습니다."),HE.forEach(e),_i=v(l),Fl=i(l,"H3",{});var GE=f(Fl);sr=p(GE,"가장 많이 쓰는 flexbox는 편하게 쓰게 해주자!"),GE.forEach(e),di=v(l),Vl=i(l,"P",{});var ME=f(Vl);Er=p(ME,"tailwindCSS를 쓰면서 또 아쉬웠던 부분은 flexbox 및 layout 관련 문법들이었습니다. CSS에서 가장 많이 쓰이는 속성들인데 직관적이지 못한 방식들과 길어지는 타이핑으로 인해 복잡하게 보이게 만드는 주범이라고 생각을 했습니다."),ME.forEach(e),ci=v(l),Xl=i(l,"BLOCKQUOTE",{});var BE=f(Xl);L=i(BE,"P",{});var k=f(L);Jt=i(k,"CODE",{});var JE=f(Jt);Sr=p(JE,"items-*"),JE.forEach(e),vr=v(k),Rt=i(k,"CODE",{});var RE=f(Rt);_r=p(RE,"content-*"),RE.forEach(e),dr=v(k),Ut=i(k,"CODE",{});var UE=f(Ut);cr=p(UE,"justify-content-*"),UE.forEach(e),ar=v(k),Qt=i(k,"CODE",{});var QE=f(Qt);Cr=p(QE,"justify-*"),QE.forEach(e),mr=p(k,`
align-items? align-content? justify-content? justify-items?
flexbox를 다루다보면 정말 헷가리는 속성들! 조금더 쉽게 다룰 수는 없을까?`),k.forEach(e),BE.forEach(e),ai=v(l),Wl=i(l,"P",{});var NE=f(Wl);br=p(NE,"이러한 문법은 가장 많이쓰는 디자인 핸드오프 툴인 figma에서 영감을 받아 AutoLayout과 유사한 형태로 작성할 수 있게 하여 간결함과 생산성을 높였습니다."),NE.forEach(e),Ci=v(l),N=i(l,"BLOCKQUOTE",{});var Fi=f(N);Nt=i(Fi,"H4",{});var zE=f(Nt);ur=p(zE,"flexbox와 figma의 AutoLayout"),zE.forEach(e),wr=v(Fi),zt=i(Fi,"OL",{});var KE=f(zt);Yl=i(KE,"LI",{});var Cp=f(Yl);Or=p(Cp,`방향 2. gap, 3. padding, 4. 배치
`),Kt=i(Cp,"IMG",{src:!0}),Cp.forEach(e),KE.forEach(e),Fi.forEach(e),mi=v(l),Zl=i(l,"P",{});var $E=f(Zl);$t=i($E,"IMG",{src:!0}),$E.forEach(e),bi=v(l),hl=i(l,"H3",{});var jE=f(hl);Lr=p(jE,"편리한 Positioning Layer"),jE.forEach(e),ui=v(l),z=i(l,"P",{});var Vi=f(z);xr=p(Vi,"뿐만 아니라 absolute나 fixed를 이용한 배치의 경우도 빈번이 일어나는데 "),jt=i(Vi,"CODE",{});var FE=f(jt);Pr=p(FE,"top:0; left:0; right:0; bottom:0; width:100%; height:100%"),FE.forEach(e),Tr=p(Vi," 와 같은 배치구문들도 보다 직관적인 방식을 제공하여 훨씬 던 간결하면서도 생산성 있는 문법을 제공하였습니다."),Vi.forEach(e),wi=v(l),nl=i(l,"P",{});var VE=f(nl);Ft=i(VE,"IMG",{src:!0}),VE.forEach(e),Oi=v(l),gl=i(l,"H3",{});var XE=f(gl);Ir=p(XE,"그밖에 더 많은 기능들"),XE.forEach(e),Li=v(l),le=i(l,"P",{});var WE=f(le);Dr=p(WE,"그밖에도 여러가지 진보된 AtomicCSS의 기조를 따르면서도 불편했었던 많은 부분들을 수정, 보완하는 방법들을 추가하였습니다."),WE.forEach(e),xi=v(l),ee=i(l,"P",{});var YE=f(ee);yr=p(YE,"TailwindCSS를 하다보면 TailwindCSS로 할 수 없는 상황이 나오곤 했습니다. class선택자나 자식 선택자나 복잡한 셀렉터를 써야 하는 경우도 마찬가지였습니다. 기본적으로 CSS에서 제공하는 모든 기능들을 제공하려고 하였습니다."),YE.forEach(e),Pi=v(l),K=i(l,"BLOCKQUOTE",{});var Xi=f(K);Vt=i(Xi,"H4",{});var ZE=f(Vt);Ar=p(ZE,"All-in-one package!"),ZE.forEach(e),kr=v(Xi),I=i(Xi,"OL",{});var F=f(I);Xt=i(F,"LI",{});var hE=f(Xt);qr=p(hE,"모든 CSS Property 사용 가능"),hE.forEach(e),Hr=v(F),Wt=i(F,"LI",{});var nE=f(Wt);Gr=p(nE,":nth-child, ::after등 모든 pseudo 사용 가능"),nE.forEach(e),Mr=v(F),Yt=i(F,"LI",{});var gE=f(Yt);Br=p(gE,"모든 Selector 사용 가능"),gE.forEach(e),Jr=v(F),Zt=i(F,"LI",{});var lS=f(Zt);Rr=p(lS,"모든 Media Query 사용 가능 (예정, 현재는 width만 제공하고 있습니다.)"),lS.forEach(e),F.forEach(e),Xi.forEach(e),Ti=v(l),te=i(l,"P",{});var eS=f(te);Ur=p(eS,"뿐만 아니라 적게쓰고 짧게 축약하면서도 직관적으로 다 담을 수 있도록 만들어 보았습니다."),eS.forEach(e),Ii=v(l),$=i(l,"BLOCKQUOTE",{});var Wi=f($);ht=i(Wi,"H4",{});var tS=f(ht);Qr=p(tS,"기타 센스 있는 문법들"),tS.forEach(e),Nr=v(Wi),w=i(Wi,"UL",{});var y=f(w);oe=i(y,"LI",{});var mp=f(oe);nt=i(mp,"CODE",{});var oS=f(nt);zr=p(oS,"w(32~100%)"),oS.forEach(e),Kr=p(mp," = min-width: 32px; max-width: 100%;"),mp.forEach(e),$r=v(y),ie=i(y,"LI",{});var bp=f(ie);gt=i(bp,"CODE",{});var iS=f(gt);jr=p(iS,"font(16/1.5/-1%)"),iS.forEach(e),Fr=p(bp," = font-size, line-height, letter-spacing"),bp.forEach(e),Vr=v(y),fe=i(y,"LI",{});var up=f(fe);lo=i(up,"CODE",{});var fS=f(lo);Xr=p(fS,"c(--primary)"),fS.forEach(e),Wr=p(up," = color: var(—primary)"),up.forEach(e),Yr=v(y),ll=i(y,"LI",{});var Yi=f(ll);eo=i(Yi,"CODE",{});var rS=f(eo);Zr=p(rS,"@w(~768)"),rS.forEach(e),hr=p(Yi,": "),to=i(Yi,"CODE",{});var pS=f(to);nr=p(pS,"@media max-width(768) { ... }"),pS.forEach(e),Yi.forEach(e),gr=v(y),re=i(y,"LI",{});var wp=f(re);oo=i(wp,"CODE",{});var sS=f(oo);lp=p(sS,"nowarp..."),sS.forEach(e),ep=p(wp," = 말줄임…"),wp.forEach(e),y.forEach(e),Wi.forEach(e),Di=v(l),pe=i(l,"H3",{});var ES=f(pe);tp=p(ES,"내가 편하면 남들도 편하다!"),ES.forEach(e),yi=v(l),se=i(l,"P",{});var SS=f(se);op=p(SS,"라는 생각으로 만들어진 AdorableCSS는 누구나 쉽게 쓸 수 있도록 만들어졌습니다."),SS.forEach(e),Ai=v(l),Ee=i(l,"P",{});var vS=f(Ee);ip=p(vS,"사용헤본 사람은 알겠지만 tailwindCSS는 사용하기 쉽지만 익숙해지기까지는 시간이 필요합니다."),vS.forEach(e),ki=v(l),Se=i(l,"P",{});var _S=f(Se);fp=p(_S,"그러나 AdorableCSS는 tailwindCSS와 비슷한 문법을 제공하면서도 더 직관적이고 익숙한 문법을 제공하고 있습니다."),_S.forEach(e),qi=v(l),ve=i(l,"P",{});var dS=f(ve);rp=p(dS,"tailwindCSS보다 할 수 있는 것이 더 많으면서도 훨씬 더 직관적이며 손이 덜 가는 문법을 제공하고 있습니다."),dS.forEach(e),Hi=v(l),_e=i(l,"P",{});var cS=f(_e);pp=p(cS,"AdorableCSS와 함께 ‘이렇게도 CSS를 편하게 사용할 수 있구나!’ 하는 멋진 경험을 한번 해보시기 바랍니다."),cS.forEach(e),Gi=v(l),de=i(l,"P",{});var aS=f(de);sp=p(aS,"감사합니다."),aS.forEach(e),this.h()},h(){ce(Ce.src,Op="https://velog.velcdn.com/images/teo/post/df3e1c91-52b6-4319-bea9-9d77630a1e0a/image.png")||V(Ce,"src",Op),ce(me.src,Lp="https://velog.velcdn.com/images/teo/post/24dc0f4b-0640-4e70-82b1-78c7061b9395/image.png")||V(me,"src",Lp),V(g,"start","2"),ce(Bt.src,xp="https://velog.velcdn.com/images/teo/post/3a5b06a8-45a4-4613-9d22-6920cc62d2df/image.png")||V(Bt,"src",xp),ce(Kt.src,Pp="https://velog.velcdn.com/images%2Fteo%2Fpost%2F167167a9-da4b-4063-a6dc-e34a69c59f10%2F%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB%20%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%E1%86%A8%202021-12-05%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%201.48.44.mov.gif")||V(Kt,"src",Pp),ce($t.src,Tp="https://velog.velcdn.com/images/teo/post/8a00bb36-16d7-4d23-bd03-ae26f70838c4/image.png")||V($t,"src",Tp),ce(Ft.src,Ip="https://velog.velcdn.com/images/teo/post/f1066bd9-00da-4c2f-b12f-924bafae69a8/image.png")||V(Ft,"src",Ip)},m(l,s){E(l,C,s),t(C,T),E(l,A,s),E(l,m,s),t(m,D),t(D,ni),t(m,gi),t(m,ae),t(ae,lf),E(l,ro,s),E(l,po,s),E(l,so,s),E(l,el,s),t(el,ef),E(l,Eo,s),E(l,tl,s),t(tl,tf),E(l,So,s),E(l,ol,s),t(ol,Ce),E(l,vo,s),E(l,il,s),t(il,me),E(l,_o,s),E(l,X,s),t(X,of),t(X,be),t(be,ff),E(l,co,s),E(l,W,s),t(W,ue),t(ue,rf),t(W,pf),E(l,ao,s),E(l,fl,s),t(fl,sf),E(l,Co,s),E(l,rl,s),t(rl,Ef),E(l,mo,s),E(l,Y,s),t(Y,we),t(we,Sf),t(Y,vf),E(l,bo,s),E(l,pl,s),t(pl,Z),t(Z,_f),t(Z,Oe),t(Oe,df),t(Z,cf),E(l,uo,s),E(l,sl,s),t(sl,af),E(l,wo,s),E(l,q,s),t(q,Cf),t(q,Le),t(Le,mf),t(q,bf),E(l,Oo,s),E(l,H,s),t(H,uf),t(H,xe),t(xe,wf),t(H,Of),E(l,Lo,s),E(l,El,s),t(El,Lf),E(l,xo,s),E(l,Sl,s),t(Sl,vl),t(vl,Pe),t(Pe,xf),t(vl,Pf),E(l,Po,s),E(l,To,s),E(l,Io,s),E(l,_l,s),t(_l,Tf),E(l,Do,s),E(l,dl,s),t(dl,If),E(l,yo,s),E(l,G,s),t(G,Te),t(Te,Df),t(G,yf),t(G,u),t(u,cl),t(cl,Ie),t(Ie,Af),t(cl,kf),t(u,qf),t(u,al),t(al,De),t(De,Hf),t(al,Gf),t(u,Mf),t(u,ye),t(ye,Bf),t(u,Jf),t(u,Ae),t(Ae,Rf),t(u,Uf),t(u,ke),t(ke,Qf),t(u,Nf),t(u,qe),t(qe,zf),E(l,Ao,s),E(l,Cl,s),t(Cl,Kf),E(l,ko,s),E(l,M,s),t(M,$f),t(M,He),t(He,jf),t(M,Ff),E(l,qo,s),E(l,ml,s),t(ml,Vf),E(l,Ho,s),E(l,bl,s),t(bl,Xf),E(l,Go,s),E(l,b,s),t(b,Ge),t(Ge,Wf),t(b,Yf),t(b,Me),t(Me,Zf),t(b,hf),t(b,Be),t(Be,nf),t(b,gf),t(b,Je),t(Je,l1),t(b,e1),t(b,Re),t(Re,t1),t(b,o1),t(b,Ue),t(Ue,i1),E(l,Mo,s),E(l,ul,s),t(ul,f1),E(l,Bo,s),E(l,wl,s),t(wl,r1),E(l,Jo,s),E(l,Ol,s),t(Ol,p1),E(l,Ro,s),E(l,Ll,s),t(Ll,s1),E(l,Uo,s),E(l,xl,s),t(xl,Qe),t(Qe,E1),E(l,Qo,s),E(l,Pl,s),t(Pl,S1),E(l,No,s),E(l,B,s),t(B,J),t(J,Ne),t(Ne,v1),t(J,_1),t(J,ze),t(ze,d1),t(J,c1),t(B,a1),t(B,h),t(h,C1),t(h,Ke),t(Ke,m1),t(h,b1),E(l,zo,s),E(l,Tl,s),t(Tl,u1),E(l,Ko,s),E(l,Il,s),t(Il,$e),t($e,w1),E(l,$o,s),E(l,Dl,s),t(Dl,O1),E(l,jo,s),E(l,R,s),t(R,U),t(U,je),t(je,L1),t(U,x1),t(U,Fe),t(Fe,P1),t(U,T1),t(R,I1),t(R,yl),t(yl,D1),t(yl,Ve),t(Ve,y1),E(l,Fo,s),E(l,Al,s),t(Al,A1),E(l,Vo,s),E(l,Q,s),t(Q,k1),t(Q,Xe),t(Xe,q1),t(Q,H1),E(l,Xo,s),E(l,kl,s),t(kl,We),t(We,G1),E(l,Wo,s),E(l,ql,s),t(ql,M1),E(l,Yo,s),E(l,Hl,s),t(Hl,B1),E(l,Zo,s),E(l,Gl,s),t(Gl,Ye),t(Ye,J1),E(l,ho,s),E(l,O,s),t(O,R1),t(O,Ze),t(Ze,U1),t(O,Q1),t(O,he),t(he,N1),t(O,z1),t(O,ne),t(ne,K1),t(O,$1),E(l,no,s),E(l,Ml,s),t(Ml,j1),E(l,go,s),E(l,Bl,s),t(Bl,n),t(n,F1),t(n,ge),t(ge,V1),t(n,X1),E(l,li,s),E(l,Jl,s),t(Jl,lt),t(lt,W1),E(l,ei,s),E(l,c,s),t(c,et),t(et,Y1),t(c,Z1),t(c,tt),t(tt,h1),t(c,n1),t(c,ot),t(ot,g1),t(c,l2),t(c,it),t(it,e2),t(c,t2),t(c,ft),t(ft,o2),t(c,i2),t(c,rt),t(rt,f2),t(c,r2),t(c,pt),t(pt,p2),t(c,s2),t(c,st),t(st,E2),t(c,S2),t(c,Et),t(Et,v2),t(c,_2),t(c,St),t(St,d2),t(c,c2),t(c,vt),t(vt,a2),t(c,C2),t(c,_t),t(_t,m2),E(l,ti,s),E(l,g,s),t(g,dt),t(dt,ct),t(ct,b2),E(l,oi,s),E(l,_,s),t(_,u2),t(_,at),t(at,w2),t(_,O2),t(_,Ct),t(Ct,L2),t(_,x2),t(_,mt),t(mt,P2),t(_,T2),t(_,bt),t(bt,I2),t(_,D2),t(_,ut),t(ut,y2),t(_,A2),t(_,wt),t(wt,k2),t(_,q2),t(_,Ot),t(Ot,H2),t(_,G2),t(_,Lt),t(Lt,M2),t(_,B2),t(_,xt),t(xt,J2),t(_,R2),t(_,Pt),t(Pt,U2),t(_,Q2),t(_,Tt),t(Tt,N2),t(_,z2),t(_,It),t(It,K2),t(_,$2),t(_,Dt),t(Dt,j2),t(_,F2),t(_,yt),t(yt,V2),t(_,X2),t(_,At),t(At,W2),t(_,Y2),t(_,kt),t(kt,Z2),t(_,h2),t(_,qt),t(qt,n2),t(_,g2),t(_,Ht),t(Ht,lr),E(l,ii,s),E(l,Rl,s),t(Rl,er),E(l,fi,s),E(l,Ul,s),t(Ul,tr),E(l,ri,s),E(l,Ql,s),t(Ql,Gt),t(Gt,or),E(l,pi,s),E(l,Nl,s),t(Nl,ir),E(l,si,s),E(l,zl,s),t(zl,Mt),t(Mt,fr),E(l,Ei,s),E(l,Kl,s),t(Kl,rr),E(l,Si,s),E(l,$l,s),t($l,Bt),E(l,vi,s),E(l,jl,s),t(jl,pr),E(l,_i,s),E(l,Fl,s),t(Fl,sr),E(l,di,s),E(l,Vl,s),t(Vl,Er),E(l,ci,s),E(l,Xl,s),t(Xl,L),t(L,Jt),t(Jt,Sr),t(L,vr),t(L,Rt),t(Rt,_r),t(L,dr),t(L,Ut),t(Ut,cr),t(L,ar),t(L,Qt),t(Qt,Cr),t(L,mr),E(l,ai,s),E(l,Wl,s),t(Wl,br),E(l,Ci,s),E(l,N,s),t(N,Nt),t(Nt,ur),t(N,wr),t(N,zt),t(zt,Yl),t(Yl,Or),t(Yl,Kt),E(l,mi,s),E(l,Zl,s),t(Zl,$t),E(l,bi,s),E(l,hl,s),t(hl,Lr),E(l,ui,s),E(l,z,s),t(z,xr),t(z,jt),t(jt,Pr),t(z,Tr),E(l,wi,s),E(l,nl,s),t(nl,Ft),E(l,Oi,s),E(l,gl,s),t(gl,Ir),E(l,Li,s),E(l,le,s),t(le,Dr),E(l,xi,s),E(l,ee,s),t(ee,yr),E(l,Pi,s),E(l,K,s),t(K,Vt),t(Vt,Ar),t(K,kr),t(K,I),t(I,Xt),t(Xt,qr),t(I,Hr),t(I,Wt),t(Wt,Gr),t(I,Mr),t(I,Yt),t(Yt,Br),t(I,Jr),t(I,Zt),t(Zt,Rr),E(l,Ti,s),E(l,te,s),t(te,Ur),E(l,Ii,s),E(l,$,s),t($,ht),t(ht,Qr),t($,Nr),t($,w),t(w,oe),t(oe,nt),t(nt,zr),t(oe,Kr),t(w,$r),t(w,ie),t(ie,gt),t(gt,jr),t(ie,Fr),t(w,Vr),t(w,fe),t(fe,lo),t(lo,Xr),t(fe,Wr),t(w,Yr),t(w,ll),t(ll,eo),t(eo,Zr),t(ll,hr),t(ll,to),t(to,nr),t(w,gr),t(w,re),t(re,oo),t(oo,lp),t(re,ep),E(l,Di,s),E(l,pe,s),t(pe,tp),E(l,yi,s),E(l,se,s),t(se,op),E(l,Ai,s),E(l,Ee,s),t(Ee,ip),E(l,ki,s),E(l,Se,s),t(Se,fp),E(l,qi,s),E(l,ve,s),t(ve,rp),E(l,Hi,s),E(l,_e,s),t(_e,pp),E(l,Gi,s),E(l,de,s),t(de,sp)},p:Zi,i:Zi,o:Zi,d(l){l&&e(C),l&&e(A),l&&e(m),l&&e(ro),l&&e(po),l&&e(so),l&&e(el),l&&e(Eo),l&&e(tl),l&&e(So),l&&e(ol),l&&e(vo),l&&e(il),l&&e(_o),l&&e(X),l&&e(co),l&&e(W),l&&e(ao),l&&e(fl),l&&e(Co),l&&e(rl),l&&e(mo),l&&e(Y),l&&e(bo),l&&e(pl),l&&e(uo),l&&e(sl),l&&e(wo),l&&e(q),l&&e(Oo),l&&e(H),l&&e(Lo),l&&e(El),l&&e(xo),l&&e(Sl),l&&e(Po),l&&e(To),l&&e(Io),l&&e(_l),l&&e(Do),l&&e(dl),l&&e(yo),l&&e(G),l&&e(Ao),l&&e(Cl),l&&e(ko),l&&e(M),l&&e(qo),l&&e(ml),l&&e(Ho),l&&e(bl),l&&e(Go),l&&e(b),l&&e(Mo),l&&e(ul),l&&e(Bo),l&&e(wl),l&&e(Jo),l&&e(Ol),l&&e(Ro),l&&e(Ll),l&&e(Uo),l&&e(xl),l&&e(Qo),l&&e(Pl),l&&e(No),l&&e(B),l&&e(zo),l&&e(Tl),l&&e(Ko),l&&e(Il),l&&e($o),l&&e(Dl),l&&e(jo),l&&e(R),l&&e(Fo),l&&e(Al),l&&e(Vo),l&&e(Q),l&&e(Xo),l&&e(kl),l&&e(Wo),l&&e(ql),l&&e(Yo),l&&e(Hl),l&&e(Zo),l&&e(Gl),l&&e(ho),l&&e(O),l&&e(no),l&&e(Ml),l&&e(go),l&&e(Bl),l&&e(li),l&&e(Jl),l&&e(ei),l&&e(c),l&&e(ti),l&&e(g),l&&e(oi),l&&e(_),l&&e(ii),l&&e(Rl),l&&e(fi),l&&e(Ul),l&&e(ri),l&&e(Ql),l&&e(pi),l&&e(Nl),l&&e(si),l&&e(zl),l&&e(Ei),l&&e(Kl),l&&e(Si),l&&e($l),l&&e(vi),l&&e(jl),l&&e(_i),l&&e(Fl),l&&e(di),l&&e(Vl),l&&e(ci),l&&e(Xl),l&&e(ai),l&&e(Wl),l&&e(Ci),l&&e(N),l&&e(mi),l&&e(Zl),l&&e(bi),l&&e(hl),l&&e(ui),l&&e(z),l&&e(wi),l&&e(nl),l&&e(Oi),l&&e(gl),l&&e(Li),l&&e(le),l&&e(xi),l&&e(ee),l&&e(Pi),l&&e(K),l&&e(Ti),l&&e(te),l&&e(Ii),l&&e($),l&&e(Di),l&&e(pe),l&&e(yi),l&&e(se),l&&e(Ai),l&&e(Ee),l&&e(ki),l&&e(Se),l&&e(qi),l&&e(ve),l&&e(Hi),l&&e(_e),l&&e(Gi),l&&e(de)}}}class IS extends CS{constructor(C){super(),mS(this,C,null,TS,bS,{})}}function DS(hi){let C,T,A;return T=new IS({}),{c(){C=o("div"),uS(T.$$.fragment),this.h()},l(m){C=i(m,"DIV",{class:!0});var D=f(C);wS(T.$$.fragment,D),D.forEach(e),this.h()},h(){V(C,"class","markdown p(20)")},m(m,D){E(m,C,D),OS(T,C,null),A=!0},p:Zi,i(m){A||(LS(T.$$.fragment,m),A=!0)},o(m){xS(T.$$.fragment,m),A=!1},d(m){m&&e(C),PS(T)}}}class AS extends CS{constructor(C){super(),mS(this,C,null,DS,bS,{})}}export{AS as default};
